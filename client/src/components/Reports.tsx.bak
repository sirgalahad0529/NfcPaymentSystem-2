import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { DatePicker } from "@/components/ui/date-picker";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { apiRequest } from "@/lib/queryClient";
import { formatCurrency } from "@/lib/utils";
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell
} from "recharts";
import {
  Calendar,
  CreditCard,
  DollarSign,
  FileBarChart,
  FileText,
  PieChart as PieChartIcon,
  TrendingUp,
  Clock,
  Calendar as CalendarIcon,
} from "lucide-react";

interface ReportsProps {
  isOpen: boolean;
  onClose: () => void;
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82ca9d', '#ffc658'];

export function Reports({ isOpen, onClose }: ReportsProps) {
  const [activeTab, setActiveTab] = useState("transaction-summary");
  const [period, setPeriod] = useState("daily");
  const [groupBy, setGroupBy] = useState("day");
  const [startDate, setStartDate] = useState<Date | undefined>(undefined);
  const [endDate, setEndDate] = useState<Date | undefined>(undefined);
  
  // Date range for the query
  const dateParams = startDate && endDate ? {
    startDate: startDate.toISOString(),
    endDate: endDate.toISOString()
  } : {};
  
  // Transaction Summary Query
  const transactionSummaryQuery = useQuery({
    queryKey: ['/api/reports/transactions-summary', period, dateParams],
    queryFn: async () => {
      try {
        const url = `/api/reports/transactions-summary?period=${period}${
          startDate && endDate 
            ? `&startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`
            : ''
        }`;
        const response = await fetch(url, {
          method: 'GET',
          credentials: 'include'
        });
        
        if (!response.ok) {
          throw new Error(`Error ${response.status}: ${response.statusText}`);
        }
        
        return await response.json();
      } catch (err) {
        console.error("Error in transaction summary query:", err);
        return { summary: [] };
      }
    },
    enabled: isOpen && activeTab === "transaction-summary"
  });
  
  // Revenue Report Query
  const revenueReportQuery = useQuery({
    queryKey: ['/api/reports/revenue', groupBy, dateParams],
    queryFn: async () => {
      try {
        const url = `/api/reports/revenue?groupBy=${groupBy}${
          startDate && endDate 
            ? `&startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`
            : ''
        }`;
        const response = await fetch(url, {
          method: 'GET',
          credentials: 'include'
        });
        
        if (!response.ok) {
          throw new Error(`Error ${response.status}: ${response.statusText}`);
        }
        
        return await response.json();
      } catch (err) {
        console.error("Error in revenue report query:", err);
        return { timeBasedRevenue: [], productRevenue: [] };
      }
    },
    enabled: isOpen && activeTab === "revenue-report"
  });
  
  // Reset dates when dialog closes
  useEffect(() => {
    if (!isOpen) {
      setStartDate(undefined);
      setEndDate(undefined);
    }
  }, [isOpen]);
  
  const clearDateRange = () => {
    setStartDate(undefined);
    setEndDate(undefined);
  };
  
  const formatChartDate = (dateStr: string) => {
    if (!dateStr) return '';
    // For month format (YYYY-MM)
    if (dateStr.length === 7) {
      const [year, month] = dateStr.split('-');
      const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      return `${monthNames[parseInt(month, 10) - 1]} ${year}`;
    }
    // For daily format (YYYY-MM-DD)
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
  };
  
  const renderTransactionSummary = () => {
    const { data, isLoading, error } = transactionSummaryQuery;
    
    if (isLoading) {
      return <div className="p-4 text-center">Loading data...</div>;
    }
    
    if (error) {
      console.error("Transaction summary error:", error);
      return (
        <Alert variant="destructive">
          <AlertDescription>
            An error occurred while fetching transaction summary data. This may happen if you don't have any transactions yet.
          </AlertDescription>
        </Alert>
      );
    }
    
    const summary = data?.summary || [];
    
    if (summary.length === 0) {
      return (
        <Alert>
          <AlertDescription>
            No transaction data available for the selected period.
          </AlertDescription>
        </Alert>
      );
    }
    
    // Calculate totals for the stats cards
    const totalTransactions = summary.reduce((sum: number, item: any) => sum + item.count, 0);
    const totalAmount = summary.reduce((sum: number, item: any) => sum + item.amount, 0);
    const totalSuccess = summary.reduce((sum: number, item: any) => sum + item.success, 0);
    const totalFailed = summary.reduce((sum: number, item: any) => sum + item.failed, 0);
    
    // Prepare data for charts
    const chartData = summary.map((item: any) => {
      const dateKey = item.date || item.weekStart || item.month;
      let displayDate = '';
      
      if (period === 'daily') {
        displayDate = formatChartDate(item.date);
      } else if (period === 'weekly') {
        displayDate = `${formatChartDate(item.weekStart)} - ${formatChartDate(item.weekEnd)}`;
      } else if (period === 'monthly') {
        displayDate = formatChartDate(item.month);
      }
      
      return {
        name: displayDate,
        transactions: item.count,
        amount: item.amount,
        success: item.success,
        failed: item.failed,
        // Original date for sorting
        originalDate: dateKey
      };
    });
    
    // Sort by date
    chartData.sort((a: any, b: any) => a.originalDate.localeCompare(b.originalDate));
    
    // Data for success rate pie chart
    const successRateData = [
      { name: 'Successful', value: totalSuccess },
      { name: 'Failed', value: totalFailed }
    ];
    
    return (
      <div className="space-y-3 sm:space-y-4 w-full overflow-x-hidden">
        {/* Stats Cards */}
        <div className="grid grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-1 sm:gap-2 md:gap-4">
          <Card className="shadow-sm">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-0 sm:pb-1 px-2 sm:px-4 pt-2 sm:pt-4">
              <CardTitle className="text-[10px] sm:text-xs md:text-sm font-medium">Total Transactions</CardTitle>
              <FileText className="h-2.5 sm:h-3 md:h-4 w-2.5 sm:w-3 md:w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent className="px-2 sm:px-4 py-1 sm:py-2">
              <div className="text-lg sm:text-xl md:text-2xl font-bold">{totalTransactions}</div>
              <p className="text-[9px] sm:text-xs text-muted-foreground">
                {period === 'daily' ? 'Daily' : period === 'weekly' ? 'Weekly' : 'Monthly'} summary
              </p>
            </CardContent>
          </Card>
          
          <Card className="shadow-sm">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-0 sm:pb-1 px-2 sm:px-4 pt-2 sm:pt-4">
              <CardTitle className="text-[10px] sm:text-xs md:text-sm font-medium">Total Revenue</CardTitle>
              <DollarSign className="h-2.5 sm:h-3 md:h-4 w-2.5 sm:w-3 md:w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent className="px-2 sm:px-4 py-1 sm:py-2">
              <div className="text-sm sm:text-lg md:text-xl font-bold">{formatCurrency(totalAmount)}</div>
              <p className="text-[9px] sm:text-xs text-muted-foreground">
                Across {totalTransactions} transactions
              </p>
            </CardContent>
          </Card>
          
          <Card className="shadow-sm">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-0 sm:pb-1 px-2 sm:px-4 pt-2 sm:pt-4">
              <CardTitle className="text-[10px] sm:text-xs md:text-sm font-medium">Success Rate</CardTitle>
              <TrendingUp className="h-2.5 sm:h-3 md:h-4 w-2.5 sm:w-3 md:w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent className="px-2 sm:px-4 py-1 sm:py-2">
              <div className="text-sm sm:text-lg md:text-xl font-bold">
                {totalTransactions > 0 
                  ? `${Math.round((totalSuccess / totalTransactions) * 100)}%` 
                  : '0%'}
              </div>
              <p className="text-[9px] sm:text-xs text-muted-foreground">
                {totalSuccess} success / {totalFailed} failed
              </p>
            </CardContent>
          </Card>
          
          <Card className="shadow-sm">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-0 sm:pb-1 px-2 sm:px-4 pt-2 sm:pt-4">
              <CardTitle className="text-[10px] sm:text-xs md:text-sm font-medium">Avg. Transaction</CardTitle>
              <CreditCard className="h-2.5 sm:h-3 md:h-4 w-2.5 sm:w-3 md:w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent className="px-2 sm:px-4 py-1 sm:py-2">
              <div className="text-sm sm:text-lg md:text-xl font-bold">
                {totalTransactions > 0 
                  ? formatCurrency(totalAmount / totalTransactions) 
                  : formatCurrency(0)}
              </div>
              <p className="text-[9px] sm:text-xs text-muted-foreground">
                Average per transaction
              </p>
            </CardContent>
          </Card>
        </div>
        
        {/* Transaction Count Chart */}
        <Card className="shadow-sm overflow-hidden">
          <CardHeader className="px-1 sm:px-2 py-1 sm:py-2">
            <CardTitle className="text-sm sm:text-base">Transaction Volume</CardTitle>
            <CardDescription className="text-[10px] sm:text-xs">
              Number of transactions over time
            </CardDescription>
          </CardHeader>
          <CardContent className="pt-0 px-0 sm:px-2 pb-1 sm:pb-2">
            <div className="h-[100px] sm:h-[120px] md:h-[140px] max-w-full overflow-hidden" style={{ maxWidth: "100%", overflowX: "hidden" }}>
              <ResponsiveContainer width="98%" height="100%" minHeight={80}>
                <BarChart data={chartData} margin={{ top: 2, right: 2, left: -15, bottom: 20 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis 
                    dataKey="name" 
                    angle={-45} 
                    textAnchor="end"
                    height={25}
                    tick={{ fontSize: 5 }}
                    interval={0}
                  />
                  <YAxis tick={{ fontSize: 5 }} />
                  <Tooltip formatter={(value) => [value, "Transactions"]} />
                  <Legend wrapperStyle={{ fontSize: "6px", paddingTop: "2px" }} />
                  <Bar 
                    dataKey="transactions" 
                    name="Transactions" 
                    fill="#8884d8" 
                  />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
        
        {/* Revenue Chart */}
        <Card className="shadow-sm overflow-hidden">
          <CardHeader className="px-1 sm:px-2 py-1 sm:py-2">
            <CardTitle className="text-sm sm:text-base">Revenue Trend</CardTitle>
            <CardDescription className="text-[10px] sm:text-xs">
              Total revenue over time
            </CardDescription>
          </CardHeader>
          <CardContent className="pt-0 px-0 sm:px-2 pb-1 sm:pb-2">
            <div className="h-[100px] sm:h-[120px] md:h-[140px] max-w-full overflow-hidden" style={{ maxWidth: "100%", overflowX: "hidden" }}>
              <ResponsiveContainer width="98%" height="100%" minHeight={80}>
                <BarChart data={chartData} margin={{ top: 2, right: 2, left: -15, bottom: 20 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis 
                    dataKey="name" 
                    angle={-45} 
                    textAnchor="end"
                    height={25}
                    tick={{ fontSize: 5 }}
                    interval={0}
                  />
                  <YAxis tick={{ fontSize: 5 }} />
                  <Tooltip formatter={(value) => [formatCurrency(value as number), "Revenue"]} />
                  <Legend wrapperStyle={{ fontSize: "6px", paddingTop: "2px" }} />
                  <Bar 
                    dataKey="amount" 
                    name="Revenue" 
                    fill="#82ca9d" 
                  />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
        
        {/* Success/Failure Pie Chart */}
        <Card className="shadow-sm overflow-hidden">
          <CardHeader className="px-1 sm:px-2 py-1 sm:py-2">
            <CardTitle className="text-sm sm:text-base">Transaction Success Rate</CardTitle>
            <CardDescription className="text-[10px] sm:text-xs">
              Proportion of successful vs failed transactions
            </CardDescription>
          </CardHeader>
          <CardContent className="pt-0 sm:pt-2 px-1 sm:px-4 pb-2 sm:pb-4">
            <div className="h-[80px] sm:h-[150px] md:h-[160px] flex items-center justify-center max-w-full overflow-hidden" style={{ maxWidth: "100%" }}>
              {successRateData[0].value + successRateData[1].value > 0 ? (
                <ResponsiveContainer width="98%" height="100%" minHeight={80}>
                  <PieChart>
                    <Pie
                      data={successRateData}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      outerRadius={30}
                      innerRadius={15}
                      fill="#8884d8"
                      dataKey="value"
                      label={({ name, percent }: { name: string, percent: number }) => 
                        window.innerWidth < 640 
                          ? `${(percent * 100).toFixed(0)}%` 
                          : `${name}: ${(percent * 100).toFixed(0)}%`
                      }
                    >
                      {successRateData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={index === 0 ? '#4ade80' : '#f87171'} />
                      ))}
                    </Pie>
                    <Legend wrapperStyle={{ fontSize: "6px", paddingTop: "2px" }} />
                    <Tooltip formatter={(value) => [value, 'Transactions']} />
                  </PieChart>
                </ResponsiveContainer>
              ) : (
                <div className="text-center text-muted-foreground text-xs">
                  No data available
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    );
  };
  
  const renderRevenueReport = () => {
    const { data, isLoading, error } = revenueReportQuery;
    
    if (isLoading) {
      return <div className="p-4 text-center">Loading data...</div>;
    }
    
    if (error) {
      console.error("Revenue report error:", error);
      return (
        <Alert variant="destructive">
          <AlertDescription>
            An error occurred while fetching revenue report data. Some features may not be available until transaction data is generated.
          </AlertDescription>
        </Alert>
      );
    }
    
    const timeBasedRevenue = data?.timeBasedRevenue || [];
    const productRevenue = data?.productRevenue || [];
    
    if (timeBasedRevenue.length === 0) {
      return (
        <Alert>
          <AlertDescription>
            No revenue data available for the selected period.
          </AlertDescription>
        </Alert>
      );
    }
    
    // Calculate totals
    const totalRevenue = timeBasedRevenue.reduce((sum: number, item: any) => sum + item.revenue, 0);
    const totalTransactions = timeBasedRevenue.reduce((sum: number, item: any) => sum + item.transactionCount, 0);
    const avgTransactionValue = totalTransactions > 0 ? totalRevenue / totalTransactions : 0;
    
    // Format data for charts
    const revenueChartData = timeBasedRevenue.map((item: any) => {
      let displayDate = '';
      
      if (item.date) {
        displayDate = formatChartDate(item.date);
      } else if (item.weekStart) {
        displayDate = `${formatChartDate(item.weekStart)} - ${formatChartDate(item.weekEnd)}`;
      } else if (item.month) {
        displayDate = formatChartDate(item.month);
      }
      
      return {
        name: displayDate,
        revenue: item.revenue,
        transactions: item.transactionCount,
        average: item.averageValue
      };
    });
    
    return (
      <div className="space-y-3 sm:space-y-4 w-full overflow-x-hidden">
        {/* Stats Cards */}
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-2 sm:gap-4">
          <Card className="shadow-sm">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-0 sm:pb-1 px-2 sm:px-4 pt-2 sm:pt-4">
              <CardTitle className="text-[10px] sm:text-xs md:text-sm font-medium">Total Revenue</CardTitle>
              <DollarSign className="h-2.5 sm:h-3 md:h-4 w-2.5 sm:w-3 md:w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent className="px-2 sm:px-4 py-1 sm:py-2">
              <div className="text-sm sm:text-lg md:text-xl font-bold">{formatCurrency(totalRevenue)}</div>
              <p className="text-[9px] sm:text-xs text-muted-foreground">
                For the selected period
              </p>
            </CardContent>
          </Card>
          
          <Card className="shadow-sm">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-0 sm:pb-1 px-2 sm:px-4 pt-2 sm:pt-4">
              <CardTitle className="text-[10px] sm:text-xs md:text-sm font-medium">Transaction Count</CardTitle>
              <FileText className="h-2.5 sm:h-3 md:h-4 w-2.5 sm:w-3 md:w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent className="px-2 sm:px-4 py-1 sm:py-2">
              <div className="text-sm sm:text-lg md:text-xl font-bold">{totalTransactions}</div>
              <p className="text-[9px] sm:text-xs text-muted-foreground">
                Successful transactions
              </p>
            </CardContent>
          </Card>
          
          <Card className="shadow-sm">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-0 sm:pb-1 px-2 sm:px-4 pt-2 sm:pt-4">
              <CardTitle className="text-[10px] sm:text-xs md:text-sm font-medium">Avg. Transaction</CardTitle>
              <CreditCard className="h-2.5 sm:h-3 md:h-4 w-2.5 sm:w-3 md:w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent className="px-2 sm:px-4 py-1 sm:py-2">
              <div className="text-sm sm:text-lg md:text-xl font-bold">{formatCurrency(avgTransactionValue)}</div>
              <p className="text-[9px] sm:text-xs text-muted-foreground">
                Per transaction
              </p>
            </CardContent>
          </Card>
        </div>
        
        {/* Revenue Over Time Chart */}
        <Card className="shadow-sm overflow-hidden">
          <CardHeader className="px-1 sm:px-2 py-1 sm:py-2">
            <CardTitle className="text-sm sm:text-base">Revenue Over Time</CardTitle>
            <CardDescription className="text-[10px] sm:text-xs">
              Revenue trend for the selected period
            </CardDescription>
          </CardHeader>
          <CardContent className="pt-0 px-0 sm:px-2 pb-1 sm:pb-2">
            <div className="h-[100px] sm:h-[120px] md:h-[140px] max-w-full overflow-hidden" style={{ maxWidth: "100%", overflowX: "hidden" }}>
              <ResponsiveContainer width="98%" height="100%" minHeight={80}>
                <BarChart data={revenueChartData} margin={{ top: 2, right: 0, left: -15, bottom: 20 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis 
                    dataKey="name" 
                    angle={-45} 
                    textAnchor="end"
                    height={25}
                    tick={{ fontSize: 5 }}
                    interval={0}
                  />
                  <YAxis tick={{ fontSize: 5 }} />
                  <Tooltip formatter={(value) => [formatCurrency(value as number), "Revenue"]} />
                  <Legend wrapperStyle={{ fontSize: "6px", paddingTop: "2px" }} />
                  <Bar 
                    dataKey="revenue" 
                    name="Revenue" 
                    fill="#8884d8" 
                  />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
        
        {/* Product Revenue Chart */}
        {productRevenue.length > 0 && (
          <Card className="shadow-sm overflow-hidden">
            <CardHeader className="px-1 sm:px-2 py-1 sm:py-2">
              <CardTitle className="text-sm sm:text-base">Revenue by Product</CardTitle>
              <CardDescription className="text-[10px] sm:text-xs">
                Top products by revenue
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-0 px-0 sm:px-2 pb-1 sm:pb-2">
              <div className="h-[100px] sm:h-[120px] md:h-[140px] max-w-full overflow-hidden" style={{ maxWidth: "100%", overflowX: "hidden" }}>
                <ResponsiveContainer width="98%" height="100%" minHeight={80}>
                  <BarChart 
                    layout="vertical" 
                    data={productRevenue.slice(0, 5)} 
                    margin={{ top: 2, right: 2, left: 45, bottom: 2 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis type="number" tick={{ fontSize: 5 }} />
                    <YAxis 
                      type="category" 
                      dataKey="description" 
                      width={55}
                      tick={{ fontSize: 5 }}
                      tickFormatter={(value) => value.length > 12 ? value.substr(0, 12) + '...' : value}
                    />
                    <Tooltip formatter={(value) => [formatCurrency(value as number), "Revenue"]} />
                    <Legend wrapperStyle={{ fontSize: "6px", paddingTop: "2px" }} />
                    <Bar 
                      dataKey="revenue" 
                      name="Revenue" 
                      fill="#82ca9d" 
                    />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        )}
        
        {/* Product Quantity Chart */}
        {productRevenue.length > 0 && (
          <Card className="shadow-sm overflow-hidden">
            <CardHeader className="px-1 sm:px-2 py-1 sm:py-2">
              <CardTitle className="text-sm sm:text-base">Quantity by Product</CardTitle>
              <CardDescription className="text-[10px] sm:text-xs">
                Top products by quantity sold
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-0 px-0 sm:px-2 pb-1 sm:pb-2">
              <div className="h-[100px] sm:h-[120px] md:h-[140px] max-w-full overflow-hidden" style={{ maxWidth: "100%", overflowX: "hidden" }}>
                <ResponsiveContainer width="98%" height="100%" minHeight={80}>
                  <BarChart 
                    layout="vertical" 
                    data={[...productRevenue].sort((a: any, b: any) => b.quantity - a.quantity).slice(0, 5)} 
                    margin={{ top: 2, right: 2, left: 45, bottom: 2 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis type="number" tick={{ fontSize: 5 }} />
                    <YAxis 
                      type="category" 
                      dataKey="description" 
                      width={55}
                      tick={{ fontSize: 5 }}
                      tickFormatter={(value) => value.length > 12 ? value.substr(0, 12) + '...' : value}
                    />
                    <Tooltip formatter={(value) => [value, "Units Sold"]} />
                    <Legend wrapperStyle={{ fontSize: "6px", paddingTop: "2px" }} />
                    <Bar 
                      dataKey="quantity" 
                      name="Quantity Sold" 
                      fill="#8884d8" 
                    />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    );
  };
  
  // For mobile screens, display a simple message with basic stats
  const isMobile = typeof window !== 'undefined' && window.innerWidth < 500;
  
  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className={isMobile 
        ? "w-[290px] h-[400px] overflow-y-auto p-2 mobile-safe-area" 
        : "w-full max-w-xl md:max-w-2xl lg:max-w-3xl h-auto max-h-[90vh] overflow-y-auto p-0 mobile-safe-area"
      }>
        <DialogTitle className="sr-only">Reports & Analytics</DialogTitle>
        <DialogDescription className="sr-only">View and analyze payment transaction data</DialogDescription>
        {/* Fixed close button in top-right corner, outside normal flow */}
        <div className="fixed top-2 right-2 z-[60]">
          <Button
            variant="secondary"
            size="sm"
            className="h-8 w-8 sm:h-10 sm:w-10 p-0 rounded-full shadow-md border border-gray-300 bg-background"
            onClick={onClose}
          >
            <span className="sr-only">Close</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-4 w-4 sm:h-5 sm:w-5"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
            >
              <path d="M18 6L6 18M6 6l12 12" />
            </svg>
          </Button>
        </div>
        
        {/* Sticky header */}
        <div className="sticky top-0 z-50 bg-background/95 backdrop-blur-sm mb-2 pt-1 pb-2 flex justify-between items-center border-b pr-8 sm:pr-10">
          <div className="flex items-center gap-2">
            <FileBarChart className="h-4 w-4 sm:h-5 sm:w-5" />
            <h2 className="text-sm sm:text-base font-medium">Reports & Analytics</h2>
          </div>
        </div>
        
        {isMobile ? (
          <div className="space-y-3 pb-4 px-2 w-full max-w-full overflow-x-hidden">
            <Alert variant="default" className="mb-4">
              <AlertDescription className="text-[10px]">
                Detailed reports are optimized for larger screens. Please use a tablet or desktop device for full analytics.
              </AlertDescription>
            </Alert>
            
            <div className="grid grid-cols-1 gap-2">
              <Card className="shadow-sm">
                <CardHeader className="px-2 py-1">
                  <CardTitle className="text-xs">Total Transactions</CardTitle>
                </CardHeader>
                <CardContent className="px-2 py-1">
                  <div className="text-sm font-bold">
                    {activeTab === "transaction-summary" 
                      ? (transactionSummaryQuery.data?.summary?.reduce((sum: number, item: any) => sum + item.count, 0) || 0)
                      : (revenueReportQuery.data?.timeBasedRevenue?.reduce((sum: number, item: any) => sum + item.transactionCount, 0) || 0)
                    }
                  </div>
                </CardContent>
              </Card>
              
              <Card className="shadow-sm">
                <CardHeader className="px-2 py-1">
                  <CardTitle className="text-xs">Total Revenue</CardTitle>
                </CardHeader>
                <CardContent className="px-2 py-1">
                  <div className="text-sm font-bold">
                    {formatCurrency(
                      activeTab === "transaction-summary" 
                        ? (transactionSummaryQuery.data?.summary?.reduce((sum: number, item: any) => sum + item.amount, 0) || 0)
                        : (revenueReportQuery.data?.timeBasedRevenue?.reduce((sum: number, item: any) => sum + item.revenue, 0) || 0)
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        ) : (
          <div className="space-y-3 sm:space-y-4 pb-4 px-1 w-full max-w-full overflow-x-hidden" style={{ width: "100%", maxWidth: "100%", boxSizing: "border-box" }}>
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full max-w-full" style={{ width: "100%", maxWidth: "100%" }}>
            <div className="flex flex-col gap-3 mb-3 sm:mb-4">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="transaction-summary" className="flex items-center justify-center gap-1 text-xs sm:text-sm py-1 sm:py-2">
                  <FileText className="h-3 w-3 sm:h-4 sm:w-4" />
                  <span className="hidden sm:inline">Transaction Summary</span>
                  <span className="sm:hidden">Transactions</span>
                </TabsTrigger>
                <TabsTrigger value="revenue-report" className="flex items-center justify-center gap-1 text-xs sm:text-sm py-1 sm:py-2">
                  <DollarSign className="h-3 w-3 sm:h-4 sm:w-4" />
                  <span className="hidden sm:inline">Revenue Report</span>
                  <span className="sm:hidden">Revenue</span>
                </TabsTrigger>
              </TabsList>
              
              {/* Date filters - now in a scrollable container on mobile */}
              <div className="flex flex-col sm:flex-row gap-1 sm:gap-2 overflow-x-auto">
                <div className="flex gap-1 sm:gap-2 min-w-max">
                  <div className="w-[100px] sm:w-auto">
                    <DatePicker
                      date={startDate}
                      onSelect={setStartDate}
                      placeholder="Start"
                    />
                  </div>
                  <div className="w-[100px] sm:w-auto">
                    <DatePicker
                      date={endDate}
                      onSelect={setEndDate}
                      placeholder="End"
                    />
                  </div>
                  {(startDate || endDate) && (
                    <Button variant="outline" size="sm" onClick={clearDateRange} className="text-xs h-8 sm:h-9 px-2 sm:px-3">
                      Clear
                    </Button>
                  )}
                </div>
                
                <div className="mt-1 sm:mt-0 min-w-max">
                  {activeTab === "transaction-summary" && (
                    <Select value={period} onValueChange={setPeriod}>
                      <SelectTrigger className="w-[130px] sm:w-[150px] h-8 sm:h-9 text-xs sm:text-sm">
                        <SelectValue placeholder="Select Period" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="daily" className="text-xs sm:text-sm">Daily</SelectItem>
                        <SelectItem value="weekly" className="text-xs sm:text-sm">Weekly</SelectItem>
                        <SelectItem value="monthly" className="text-xs sm:text-sm">Monthly</SelectItem>
                      </SelectContent>
                    </Select>
                  )}
                  
                  {activeTab === "revenue-report" && (
                    <Select value={groupBy} onValueChange={setGroupBy}>
                      <SelectTrigger className="w-[130px] sm:w-[150px] h-8 sm:h-9 text-xs sm:text-sm">
                        <SelectValue placeholder="Group By" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="day" className="text-xs sm:text-sm">Day</SelectItem>
                        <SelectItem value="week" className="text-xs sm:text-sm">Week</SelectItem>
                        <SelectItem value="month" className="text-xs sm:text-sm">Month</SelectItem>
                      </SelectContent>
                    </Select>
                  )}
                </div>
              </div>
            </div>
            
            <TabsContent value="transaction-summary" className="mt-0 w-full max-w-full overflow-x-hidden" style={{ width: "100%", maxWidth: "100%" }}>
              {renderTransactionSummary()}
            </TabsContent>
            
            <TabsContent value="revenue-report" className="mt-0 w-full max-w-full overflow-x-hidden" style={{ width: "100%", maxWidth: "100%" }}>
              {renderRevenueReport()}
            </TabsContent>
          </Tabs>
        </div>
      </DialogContent>
    </Dialog>
  );
}